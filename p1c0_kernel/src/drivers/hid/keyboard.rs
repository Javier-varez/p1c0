// TODO(jalv): Add missing entries here
static SCAN_TABLE: [Option<char>; 256] = [
    None,
    None,
    None,
    None,
    Some('A'),
    Some('B'),
    Some('C'),
    Some('D'),
    Some('E'),
    Some('F'),
    Some('G'),
    Some('H'),
    Some('I'),
    Some('J'),
    Some('K'),
    Some('L'),
    Some('M'),
    Some('N'),
    Some('O'),
    Some('P'),
    Some('Q'),
    Some('R'),
    Some('S'),
    Some('T'),
    Some('U'),
    Some('V'),
    Some('W'),
    Some('X'),
    Some('Y'),
    Some('Z'),
    Some('1'),
    Some('2'),
    Some('3'),
    Some('4'),
    Some('5'),
    Some('6'),
    Some('7'),
    Some('8'),
    Some('9'),
    Some('0'),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

#[derive(Debug, PartialEq)]
pub struct Scancode(u8);

impl Scancode {
    pub fn new(value: u8) -> Self {
        Scancode(value)
    }

    pub fn to_char(&self) -> Option<char> {
        SCAN_TABLE[self.0 as usize]
    }
}

#[derive(Debug)]
pub struct KeyboardReport {
    _modifiers: u8,
    keycodes: [Scancode; 6],
}

impl KeyboardReport {
    pub fn new(data: &[u8]) -> Self {
        Self {
            _modifiers: data[1],
            keycodes: [
                Scancode::new(data[3]),
                Scancode::new(data[4]),
                Scancode::new(data[5]),
                Scancode::new(data[6]),
                Scancode::new(data[7]),
                Scancode::new(data[8]),
            ],
        }
    }
    pub fn keycodes(&self) -> &[Scancode] {
        &self.keycodes
    }
}
